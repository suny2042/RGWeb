@page "/adm/ServerPage"
@*〈공통〉*@
@implements IDisposable
@inject IJSRuntime JS               // 자바스크립트 관련
@inject ProtectedLocalStorage LS    // 로컬스토리지 관련
@inject NavigationManager NM        // 페이지 이동 관련
@* 뷰모델의 인스턴스 주입 *@
@inject RGWeb.ViewModels.IContentViewModel VM
@using static RGWeb.Models.ContentModel
@using RGWeb.ViewModels
@using static RGWeb.Shared.ServerInfo

@using OpenQA.Selenium;
@using OpenQA.Selenium.Chrome;
@using System.Diagnostics;

<h3 class="RGTextColor">Server</h3>

<div class="d-flex align-items-center RGTextColor">
    Server Start&nbsp;<SfSwitch @ref="serverSwitch" TChecked="bool" ValueChange="serverOnoff_ValueChange"></SfSwitch>
</div>
    


@code {
    protected List<ChromeDriverService> driverService = new List<ChromeDriverService>();
    protected ChromeOptions options;
    protected List<ChromeDriver> driver = new List<ChromeDriver>();
    protected Queue<ChromeDriver> driverQueue = new Queue<ChromeDriver>();
    private bool serverOnoff = false;
    SfSwitch<bool> serverSwitch;

    // 리프레쉬 스케줄러
    private List<PageType> refreshList_Lv0 = new List<PageType>(); // 자동
    private List<Queue<PageType>> refreshQueue_Lv0 = new List<Queue<PageType>>();
    private List<PageType> refreshList_Lv1 = new List<PageType>();
    private List<Queue<PageType>> refreshQueue_Lv1 = new List<Queue<PageType>>();
    private List<PageType> refreshList_Lv2 = new List<PageType>();
    private List<Queue<PageType>> refreshQueue_Lv2 = new List<Queue<PageType>>();
    private List<PageType> refreshList_Lv3 = new List<PageType>();
    private List<Queue<PageType>> refreshQueue_Lv3 = new List<Queue<PageType>>();

    protected override async Task OnInitializedAsync()
    {
        VM.oContentList.Clear();
        for (int i = 0; i < PageTypeList.Count; i++)
            VM.oContentList.Add(new ModelDataSet<Content>());

        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged += async (sender, e) =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // 메모리 누수 방지
    public void Dispose()
    {
        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged -= OnPropertyChangedHandler;

        ServerEnd();
    }

    // 페이지가 로드 될 시 (비동기)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // 첫번째 렌더때 실행
        {
            InitRefreshSchedule();
        }
        else             // 첫번째 렌더 후에 실행
        {
            ;
        }
    }

    private void serverOnoff_ValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        serverOnoff = args.Checked;

        if (serverOnoff)
            ServerStart();
        else
            ServerEnd();
    }

    public async Task ServerEnd()
    {
        for (int i = 0; i < PageTypeList.Count; i++)
            if (driver is not null && driver.Count > 0 && driver[i] is not null)
            {
                driver[i].Quit();
                driverService[i].Dispose();
            }

        Console.WriteLine("Driver Dispose");
    }

    // 페이지의 시작
    public async Task ServerStart() // 페이지가 처음 로드될때 (아래보다 주로 사용)
    {
        for (int i = 0; i < PageTypeList.Count; i++)
            if (driver is not null && driver.Count > 0 && driver[i] is not null)
                driver[i].Quit();
        driverService.Clear();
        driver.Clear();

        // System.IO.Directory.GetCurrentDirectory() + @"\bin\Debug\net6.0\"
        options = new ChromeOptions();
        options.AddArgument("-headless");
        options.AddArgument("-disable-gpu");
        //options.AddArgument("-disable-images");
        //options.SetPreference("profile.default_content_setting_values.images", 2);
        options.AddArgument("--log-level=3");
        options.AddArgument("--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1");
        // 성능개선대책
        //options.AddArguments("enable-automation");
        //options.AddArguments("--no-sandbox");
        //options.AddArguments("--disable-extensions");
        //options.AddArguments("--dns-prefetch-disable");

        //for (int i = 0; i < PageTypeList.Count; i++)
        //{
        //    driverService.Add(ChromeDriverService.CreateDefaultService());
        //    driverService[i].Port = 44000 + i;
        //    driver.Add(new ChromeDriver(driverService[i], options));
        //    driver[i].Manage().Timeouts().PageLoad = TimeSpan.FromMilliseconds(3000);   // 페이지 접속시 지정한 시간 이후까지 로드가 안되면 에러로 빠짐
        //    driver[i].Manage().Timeouts().ImplicitWait = TimeSpan.FromMilliseconds(0);  // 탐색시 object가 없으면 대기하는 시간.
        //}

        Console.WriteLine("[ListRefresh] Start");

        Stopwatch stopwatch = new Stopwatch();
        List<Thread> threadList = new List<Thread>();

        while(serverOnoff)
        {
            stopwatch.Reset();
            stopwatch.Start();
            threadList.Clear();

            LoadRefreshSchedule();

            NewThread_LvN(ref threadList, refreshQueue_Lv1); // 잘안움직이는것부터 먼저
            NewThread_LvN(ref threadList, refreshQueue_Lv2);
            NewThread_LvN(ref threadList, refreshQueue_Lv3);
            NewThread_LvN(ref threadList, refreshQueue_Lv0);

            LoadDriverSchedule(threadList.Count);

            foreach (Thread t in threadList)
            {
                t.IsBackground = true;
                t.Start();
            }

            foreach (Thread t in threadList)
                t.Join();
            VM.oContentList[0].OnPropertyChanged("All");
            stopwatch.Stop();
            Console.WriteLine("[While] 쓰레드수 : " + threadList.Count + " / 시간결과 : " + stopwatch.ElapsedMilliseconds + "ms");
            ServerRefreshTime = stopwatch.ElapsedMilliseconds;

            // 스케줄러
            PageSchedule(refreshList_Lv1);
            PageSchedule(refreshList_Lv2);
            PageSchedule(refreshList_Lv3);
            PageSchedule(refreshList_Lv0);

            await Task.Delay(10);
        }
    }

    private void PageSchedule(List<PageType> pRefreshList_Lv)
    {
        DateTime now = DateTime.Now;
        int DiffMin = 0;
        PageType temp = null;

        for (int i = 0;  i < pRefreshList_Lv.Count; i++)
        {
            DiffMin = (now - pRefreshList_Lv[i].LastContentDateTime).Minutes;
            if (DiffMin == 0)
            {
                if (pRefreshList_Lv[i].RefreshLevel == 1) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 1;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv1.Add(temp);
            }
            else if (DiffMin <= 1)
            {
                if (pRefreshList_Lv[i].RefreshLevel == 2) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 2;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv2.Add(temp);
            }
            else if (DiffMin <= 2)
            {
                if (pRefreshList_Lv[i].RefreshLevel == 3) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 3;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv3.Add(temp);
            }
            else
            {
                if (pRefreshList_Lv[i].RefreshLevel == 0) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 0;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv0.Add(temp);
            }
        }
    }

    private void LoadDriverSchedule(int pCount)
    {
        for (int i = driver.Count; i < pCount; i++)
        {
            driverService.Add(ChromeDriverService.CreateDefaultService());
            driverService[i].Port = 44000 + i;
            driver.Add(new ChromeDriver(driverService[i], options));
            driver[i].Manage().Timeouts().PageLoad = TimeSpan.FromMilliseconds(3000);   // 페이지 접속시 지정한 시간 이후까지 로드가 안되면 에러로 빠짐
            driver[i].Manage().Timeouts().ImplicitWait = TimeSpan.FromMilliseconds(0);  // 탐색시 object가 없으면 대기하는 시간.
        }

        for (int i = 0; i < driver.Count; i++)
                driverQueue.Enqueue(driver[i]);
    }

    private void NewThread_LvN(ref List<Thread> pThreadList, List<Queue<PageType>> pQueue)
    {
        foreach(Queue<PageType> item in pQueue)
            if (item.Any())
            {
                PageType lIndex = item.Dequeue();
                pThreadList.Add(new Thread(() => ListRefresh_dcMobile_Thread(lIndex)));
                Console.WriteLine("[NewThread_LvN lv/Th/val] " + lIndex.RefreshLevel + "|" + (pThreadList.Count - 1) + "|" +  lIndex.Value + " : " + lIndex.Text);
            }
    }

    private void InitRefreshSchedule()  // 서버 on시 처음 한번만 실행
    {
        for (int i=0; i < PageTypeList.Count; i++)
        {
            switch(PageTypeList[i].RefreshLevel)
            {
                case 0:
                    refreshList_Lv0.Add(PageTypeList[i]);
                    break;
                case 1:
                    refreshList_Lv1.Add(PageTypeList[i]);
                    break;
                case 2:
                    refreshList_Lv2.Add(PageTypeList[i]);
                    break;
                case 3:
                    refreshList_Lv3.Add(PageTypeList[i]);
                    break;
                case -1:  // 무시리스트
                default:
                    break;
            }
        }
    }

    private void AddRefreshQueue(int pLevel, List<PageType> pList, List<Queue<PageType>> pQueue)
    {
        if (pQueue.Count <= 0 || pQueue.ElementAt(0).Any() == false) // 큐가 없으면 추가
        {
            pQueue.Clear();
            for (int i = 0; i < pList.Count; i++)
            {
                // 큐에 빈곳 없으면 리스트추가해서 큐 생성
                if (pLevel == 0)
                {
                    if (i == 0)
                        pQueue.Add(new Queue<PageType>());
                }
                else if (pLevel != 0 && i % pLevel == 0) // 레벨 0이 오면 에러남
                {
                    pQueue.Add(new Queue<PageType>());
                }

                pQueue[pQueue.Count - 1].Enqueue(pList[i]);
            }
        }
    }

    private void LoadRefreshSchedule()
    {
        AddRefreshQueue(1, refreshList_Lv1, refreshQueue_Lv1);
        AddRefreshQueue(2, refreshList_Lv2, refreshQueue_Lv2);
        AddRefreshQueue(3, refreshList_Lv3, refreshQueue_Lv3);
        AddRefreshQueue(0, refreshList_Lv0, refreshQueue_Lv0);
    }

    private void ListRefresh_dcMobile_Thread(PageType pIndex)
    {
        ChromeDriver lDriver = driverQueue.Dequeue();
        try
        {
            lDriver.Navigate().GoToUrl(pIndex.Url);
        } catch {}

        IReadOnlyCollection<IWebElement> webElements = lDriver.FindElements(By.ClassName("gall-detail-lnktb"));
        VM.oContentList[pIndex.Value].ClearDataset();

        for (int i = 0; i < 20; i++)
            ListRefresh_dcMobile_Find(pIndex, i , webElements);

        // Last 게시물을 저장 (글 올린 시간)
        if (VM.oContentList is not null && VM.oContentList[pIndex.Value].dataSet.Count > 0)
            pIndex.LastContentDateTime = VM.oContentList[pIndex.Value].dataSet[VM.oContentList[pIndex.Value].dataSet.Count - 1].date;
    }

    private void ListRefresh_dcMobile_Find(PageType pIndex, int pElementIndex, IReadOnlyCollection<IWebElement> pWebElement)
    {
        IWebElement lLeftLabel = null;
        IReadOnlyCollection<IWebElement> lBottomLabel = null;
        try
        {
            lLeftLabel = pWebElement.ElementAt(pElementIndex).FindElement(By.ClassName("lt"));
            lBottomLabel = lLeftLabel.FindElement(By.ClassName("ginfo")).FindElements(By.TagName("li"));
        }
        catch
        { 
            Console.WriteLine("[while " + pIndex.Value + "] WebElement Fail");
            return;
        } // 여기부터 에러면 그냥 리턴

        // 디씨 마갤/미니갤 대응
        int lElementNumber = 0;
        if (pIndex.SiteType == 2)
            lElementNumber++;

        string lUserIconUrl = "";
        try
        {
            lUserIconUrl = lBottomLabel.ElementAt(lElementNumber + 0).FindElement(By.TagName("span")).GetAttribute("class");
        }
        catch { }

        string lUserIp = "";

        string lCommentCount = "";
        try
        {
            lCommentCount = pWebElement.ElementAt(pElementIndex).FindElement(By.ClassName("rt")).FindElement(By.ClassName("ct")).Text;
        }
        catch { }

        try
        {
            Content n = new Content()
                {
                    num = UrlToNumber(lLeftLabel.GetAttribute("href")),
                    url = lLeftLabel.GetAttribute("href"),
                    title = lLeftLabel.FindElement(By.ClassName("subject-add")).FindElement(By.ClassName("subjectin")).Text,
                    userName = lBottomLabel.ElementAt(lElementNumber + 0).Text,
                    viewCount = lBottomLabel.ElementAt(lElementNumber + 2).Text.Remove(0, 3),
                    goodCount = lBottomLabel.ElementAt(lElementNumber + 3).Text.Remove(0, 3),
                    contentDate = lBottomLabel.ElementAt(lElementNumber + 1).Text,
                    date = fnDcinsideStrToDate(lBottomLabel.ElementAt(lElementNumber + 1).Text),
                    userIconUrl = lUserIconUrl,
                    userIp = lUserIp,
                    contentIconUrl = lLeftLabel.FindElement(By.ClassName("subject-add")).FindElement(By.TagName("span")).GetAttribute("class"),
                    commentCount = lCommentCount,
                };

            VM.oContentList[pIndex.Value].InsertRow(n);
        }
        catch
        {
            Console.WriteLine("[while " + pIndex.Value + "] new Content Fail");
            return;
        }
    }

    private async Task ListRefresh_dcPC(int pPageNumber, string pPageUrl)
    {
        //Console.WriteLine("[ListRefresh " + pPageNumber + "] Start : " + pPageUrl);

        //while(serverOnoff)
        //{
        //    Console.WriteLine("[while " + pPageNumber + "] Start");
        //    try
        //    {
        //        //driver.Navigate().Refresh();
        //        driver[pPageNumber].Navigate().GoToUrl(pPageUrl);
        //    } catch { }

        //    Console.WriteLine("[while " + pPageNumber + "] End");
        //    await Task.Delay(500);
        //    continue;

        //    IReadOnlyCollection<IWebElement> x = driver[pPageNumber].FindElements(By.CssSelector("tr[class='ub-content us-post']"));
        //    VM.oContentList[pPageNumber].ClearDataset();

        //    int findCount = 0;
        //    foreach(IWebElement y in x)
        //    {
        //        findCount++;
        //        if (findCount >= 20)
        //            break;

        //        string lUserIconUrl = "";
        //        try
        //        {
        //            lUserIconUrl = y.FindElement(By.CssSelector("a[class='writer_nikcon']")).FindElement(By.TagName("img")).GetAttribute("src");
        //        } catch {}

        //        string lUserIp = "";
        //        try
        //        {
        //            lUserIp = y.FindElement(By.CssSelector("span[class='ip']")).Text;
        //        } catch {}

        //        string lCommentCount = "";
        //        try
        //        {
        //            lCommentCount = y.FindElement(By.CssSelector("a[class='reply_numbox']")).FindElement(By.CssSelector("span[class='reply_num']")).Text;
        //        } catch {}

        //        try
        //        {
        //            IWebElement lTopLabel = y.FindElement(By.ClassName("gall_tit")).FindElement(By.TagName("a")); // gall_tit만 해야함. 마이크 아이콘이 있을 수 있음
        //            Content n = new Content()
        //            {
        //                num = int.Parse(y.FindElement(By.ClassName("gall_num")).Text),
        //                url = lTopLabel.GetAttribute("href"),
        //                title = lTopLabel.Text,
        //                userName = y.FindElement(By.ClassName("nickname")).GetAttribute("title"),
        //                viewCount = y.FindElement(By.ClassName("gall_count")).Text,
        //                goodCount = y.FindElement(By.ClassName("gall_recommend")).Text,
        //                date = StrToDate(y.FindElement(By.ClassName("gall_date")).GetAttribute("title")),
        //                userIconUrl = lUserIconUrl,
        //                userIp = lUserIp,
        //                contentIconUrl = lTopLabel.FindElement(By.TagName("em")).GetAttribute("class"),
        //                commentCount = lCommentCount,
        //            };

        //            // 공지는 리스트에 추가 x
        //            if (n.contentIconUrl == "icon_img icon_notice")
        //            {
        //                findCount--; // 공지 수 만큼 다른 게시글로 추가
        //                continue;
        //            }

        //            VM.oContentList[pPageNumber].InsertRow(n);
        //        } catch
        //        {
        //            Console.WriteLine("[while " + pPageNumber + "] new Content Fail");
        //            continue;
        //        }
        //    }
        //    VM.oContentList[pPageNumber].OnPropertyChanged("" + pPageNumber);

        //    Console.WriteLine("[while " + pPageNumber + "] End");
        //    await Task.Delay(100);
        //}
    }

    // DcInsise 문자열을 DateTime으로 반환
    public DateTime fnDcinsideStrToDate(string pStr)
    {
        DateTime now = new DateTime();
        DateTime dt = new DateTime();
        
        if (pStr.Length == 5)
        {
            if (pStr[2] == ':') // hh:mm
                dt = new DateTime(now.Year
                , now.Month
                , now.Day
                , int.Parse(pStr.Substring(0, 2))
                , int.Parse(pStr.Substring(3, 2))
                , now.Second
                );
            else                // mm.dd
                dt = new DateTime(now.Year
                , int.Parse(pStr.Substring(0, 2))
                , int.Parse(pStr.Substring(3, 2))
                , now.Hour
                , now.Minute
                , now.Second
                );
        }
        else if (pStr.Length == 19) // xxxx-xx-xx xx:xx:xx
            dt = new DateTime(int.Parse(pStr.Substring(0, 4))
            , int.Parse(pStr.Substring(5, 2))
            , int.Parse(pStr.Substring(8, 2))
            , int.Parse(pStr.Substring(11, 2))
            , int.Parse(pStr.Substring(14, 2))
            , int.Parse(pStr.Substring(17, 2))
            );
        else if (pStr.Length == 8)  // yy.mm.dd
            dt = new DateTime(2000 + int.Parse(pStr.Substring(0, 2))
            , int.Parse(pStr.Substring(3, 2))
            , int.Parse(pStr.Substring(6, 2))
            , now.Hour
            , now.Minute
            , now.Second
            );

        return dt;
    }

    public int UrlToNumber(string pUrl)
    {
        if (string.IsNullOrEmpty(pUrl))
            return 0;
        string[] temp = pUrl.Split('/');
        return int.Parse(temp[temp.Length - 1]);
    }
}


