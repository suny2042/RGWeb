@page "/adm/ServerPage"
@*〈공통〉*@
@implements IDisposable
@inject IJSRuntime JS               // 자바스크립트 관련
@inject ProtectedLocalStorage LS    // 로컬스토리지 관련
@inject NavigationManager NM        // 페이지 이동 관련
@* 뷰모델의 인스턴스 주입 *@
@inject RGWeb.ViewModels.IContentViewModel VM
@using static RGWeb.Shared.Models.ContentModel
@using RGWeb.ViewModels
@using static RGWeb.Shared.ServerInfo

@using OpenQA.Selenium;
@using OpenQA.Selenium.Chrome;
@using System.Diagnostics;
@using System.Net;
@using HtmlAgilityPack;
@using System.Web


<div class="w-100 h-100 d-flex RGTextColor">
    <div class="container my-auto">
        <div class="card border RGBorderColor">
            <div class="card-header">
                <label class="h5 m-0 p-3 fw-bold" style="white-space: nowrap;">
                    Server Control Panel
                </label>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center RGTextColor">
                    <i class="fa-solid fa-server"></i>&nbsp;
                    <SfSwitch @bind-Checked="VM.serverOnoff" TChecked="bool" ValueChange="serverOnoff_ValueChange"></SfSwitch>&nbsp;
                    <i class="fa-solid fa-align-left"></i>&nbsp;
                    <SfSwitch @bind-Checked="VM.serverCrawlerOnoff" TChecked="bool" ValueChange="serverCrawlerOnoff_ValueChange"></SfSwitch>&nbsp;
                    쓰레드 수 : @(threadList.Count) / 시간 : @(ServerRefreshTime)ms 
                    <div class="row m-0 rounded border RGBorderColor">
                        <div class="col p-1">
                            <i class="fa-solid fa-border-all"></i>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_Index + ServerInfo.UserConnectCount_LitePC + ServerInfo.UserConnectCount_LiteMobile + ServerInfo.UserConnectCount_ProPC + ServerInfo.UserConnectCount_ProMobile + ServerInfo.UserConnectCount_ProAir)
                        </div>
                        <div class="col p-1">
                            <i class="fa-solid fa-house"></i>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_Index)
                        </div>
                        <div class="col p-1">
                            <i class="fa-solid fa-desktop"></i><i class="fa-solid fa-tablet"></i><span class="badge bg-secondary">Lite</span>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_LitePC)
                        </div>
                        <div class="col p-1">
                            <i class="fa-solid fa-mobile-screen-button"></i><span class="badge bg-secondary">Lite</span>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_LiteMobile)
                        </div>
                        <div class="col p-1">
                            <i class="fa-solid fa-desktop"></i><i class="fa-solid fa-tablet"></i><span class="badge bg-warning">Pro</span>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_ProPC)
                        </div>
                        <div class="col p-1">
                            <i class="fa-solid fa-mobile-screen-button"></i><span class="badge bg-warning">Pro</span>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_ProMobile)
                        </div>
                        <div class="col p-1">
                            <i class="fa-solid fa-tower-broadcast"></i><span class="badge bg-warning">Pro</span>
                        </div>
                        <div class="col p-1">
                            @(ServerInfo.UserConnectCount_ProAir)
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">

            </div>
        </div>
    </div>
</div>
    

@code {
    Stopwatch stopwatch = new Stopwatch();
    List<Thread> threadList = new List<Thread>();

    // 리프레쉬 스케줄러
    private List<PageType> refreshList_Lv0 = new List<PageType>(); // 자동
    private List<Queue<PageType>> refreshQueue_Lv0 = new List<Queue<PageType>>();
    private List<PageType> refreshList_Lv1 = new List<PageType>();
    private List<Queue<PageType>> refreshQueue_Lv1 = new List<Queue<PageType>>();
    private List<PageType> refreshList_Lv2 = new List<PageType>();
    private List<Queue<PageType>> refreshQueue_Lv2 = new List<Queue<PageType>>();
    private List<PageType> refreshList_Lv3 = new List<PageType>();
    private List<Queue<PageType>> refreshQueue_Lv3 = new List<Queue<PageType>>();

    protected override async Task OnInitializedAsync()
    {
        VM.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // 메모리 누수 방지
    public void Dispose()
    {
        VM.PropertyChanged -= OnPropertyChangedHandler;
        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged -= OnPropertyChangedHandler;
    }

    // 페이지가 로드 될 시 (비동기)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // 첫번째 렌더때 실행
        {
            ;
        }
        else             // 첫번째 렌더 후에 실행
        {
            ;
        }
    }

    private void serverOnoff_ValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (VM.serverOnoff)
            ServerStart();
    }

    public async Task ServerStart()
    {
        await InitContentList();

        while(VM.serverOnoff)
        {
            //VM.oContentList = StaticData.sContent;

            for (int i = 0; i < StaticData.sContent.Count; i++)
            {
                VM.oContentList[i].dataSet.Clear();
                for (int j = 0; j < StaticData.sContent[i].dataSet.Count; j++)
                {
                    VM.oContentList[i].dataSet.Add(StaticData.sContent[i].dataSet[j]);
                }
                //VM.oContentList[i].dataSet = StaticData.sContent[i].dataSet;
                //VM.oContentList[i].dataSet = DataSetControl.Copy<Content>(StaticData.sContent[i].dataSet);
            }

            VM.oContentList[0].OnPropertyChanged("All");
            await Task.Delay(1000);
        }
    }

    private void serverCrawlerOnoff_ValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (VM.serverCrawlerOnoff)
            ServerCrawlingStart();
        else
            ServerCrawlingEnd();
    }

    public async Task ServerCrawlingStart()
    {
        Console.WriteLine("[Crawling] Start");
        await ServerCrawlerStart();
    }

    public async Task ServerCrawlingEnd()
    {
        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged -= OnPropertyChangedHandler;

        Console.WriteLine("[Crawling] Dispose");
    }

    public async Task InitContentList()
    {
        VM.oContentList.Clear();
        for (int i = 0; i < PageTypeList.Count; i++)
            VM.oContentList.Add(new ModelDataSet<Content>());

        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged += async (sender, e) =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
    }

    // 페이지의 시작
    public async Task ServerCrawlerStart() // 페이지가 처음 로드될때 (아래보다 주로 사용)
    {
        Console.WriteLine("[ServerCrawler] Start");

        InitRefreshSchedule();

        await InitContentList();

        while(VM.serverCrawlerOnoff)
        {
            stopwatch.Reset();
            stopwatch.Start();
            threadList.Clear();

            LoadRefreshSchedule();

            NewThread_LvN(ref threadList, refreshQueue_Lv1);
            NewThread_LvN(ref threadList, refreshQueue_Lv2);
            NewThread_LvN(ref threadList, refreshQueue_Lv3);
            NewThread_LvN(ref threadList, refreshQueue_Lv0);

            foreach (Thread t in threadList)
            {
                t.IsBackground = true;
                t.Start();
            }

            foreach (Thread t in threadList)
                t.Join();
            VM.oContentList[0].OnPropertyChanged("All");
            //stopwatch.Stop();
            ServerRefreshTime = stopwatch.ElapsedMilliseconds;
            //stopwatch.Start();
            Console.WriteLine("[While] 쓰레드수 : " + threadList.Count + " / 시간결과 : " + ServerRefreshTime + "ms");

            // 스케줄러
            PageSchedule(refreshList_Lv1);
            PageSchedule(refreshList_Lv2);
            PageSchedule(refreshList_Lv3);
            PageSchedule(refreshList_Lv0);

            if (ServerRefreshTime < 1000)       // 최소 1초 딜레이 보장
                await Task.Delay(1000 - (int)ServerRefreshTime);
            else
                await Task.Delay(10);
            stopwatch.Stop();
            //Console.WriteLine("타임 : " + stopwatch.ElapsedMilliseconds);
        }
    }

    private void PageSchedule(List<PageType> pRefreshList_Lv)
    {
        DateTime now = DateTime.Now;
        int DiffMin = 0;
        PageType temp = null;

        for (int i = 0;  i < pRefreshList_Lv.Count; i++)
        {
            if (pRefreshList_Lv[i].FixedRefreshLevel == true) continue; // 고정레벨은 무시

            DiffMin = (now - pRefreshList_Lv[i].LastContentDateTime).Minutes;
            if (DiffMin <= 1)
            {
                if (pRefreshList_Lv[i].RefreshLevel == 1) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 1;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv1.Add(temp);
            }
            else if (DiffMin <= 2)
            {
                if (pRefreshList_Lv[i].RefreshLevel == 2) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 2;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv2.Add(temp);
            }
            else if (DiffMin <= 3)
            {
                if (pRefreshList_Lv[i].RefreshLevel == 3) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 3;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv3.Add(temp);
            }
            else
            {
                if (pRefreshList_Lv[i].RefreshLevel == 0) continue;
                PageTypeList[pRefreshList_Lv[i].Value].RefreshLevel = 0;
                temp = pRefreshList_Lv[i];
                pRefreshList_Lv.RemoveAt(i);
                i--;
                refreshList_Lv0.Add(temp);
            }
        }
    }

    private void NewThread_LvN(ref List<Thread> pThreadList, List<Queue<PageType>> pQueue)
    {
        foreach(Queue<PageType> item in pQueue)
            if (item.Any())
            {
                PageType lIndex = item.Dequeue();
                pThreadList.Add(new Thread(() => ListRefresh_dcMobile_Thread(lIndex)));
                Console.WriteLine("[NewThread_LvN lv/Th/val] " + lIndex.RefreshLevel + "|" + (pThreadList.Count - 1) + "|" +  lIndex.Value + " : " + lIndex.Text);
            }
    }

    private void InitRefreshSchedule()
    {
        refreshList_Lv1.Clear();
        refreshList_Lv2.Clear();
        refreshList_Lv3.Clear();
        refreshList_Lv0.Clear();

        for (int i=0; i < PageTypeList.Count; i++)
        {
            switch(PageTypeList[i].RefreshLevel)
            {
                case 0:
                    refreshList_Lv0.Add(PageTypeList[i]);
                    break;
                case 1:
                    refreshList_Lv1.Add(PageTypeList[i]);
                    break;
                case 2:
                    refreshList_Lv2.Add(PageTypeList[i]);
                    break;
                case 3:
                    refreshList_Lv3.Add(PageTypeList[i]);
                    break;
                case -1:  // 무시리스트
                default:
                    break;
            }
        }
    }

    private void AddRefreshQueue(int pLevel, List<PageType> pList, List<Queue<PageType>> pQueue)
    {
        if (pQueue.Count <= 0 || pQueue.ElementAt(0).Any() == false) // 큐가 없으면 추가
        {
            pQueue.Clear();
            for (int i = 0; i < pList.Count; i++)
            {
                // 큐에 빈곳 없으면 리스트추가해서 큐 생성
                if (pLevel == 0)
                {
                    if (i == 0)
                        pQueue.Add(new Queue<PageType>());
                }
                else if (pLevel != 0 && i % pLevel == 0) // 레벨 0이 오면 에러남
                {
                    pQueue.Add(new Queue<PageType>());
                }

                pQueue[pQueue.Count - 1].Enqueue(pList[i]);
            }
        }
    }

    private void LoadRefreshSchedule()
    {
        AddRefreshQueue(1, refreshList_Lv1, refreshQueue_Lv1);
        AddRefreshQueue(2, refreshList_Lv2, refreshQueue_Lv2);
        AddRefreshQueue(3, refreshList_Lv3, refreshQueue_Lv3);
        AddRefreshQueue(0, refreshList_Lv0, refreshQueue_Lv0);
    }

    private void ListRefresh_dcMobile_Thread(PageType pIndex)
    {
        HttpWebRequest wrGETURL;
        wrGETURL = (HttpWebRequest)WebRequest.Create(pIndex.Url);
        wrGETURL.Method = "GET";
        wrGETURL.UserAgent = "Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1";
        wrGETURL.Timeout = 3000;

        Stream objStream = null;
        HtmlDocument doc = new HtmlDocument();
        try
        {
            objStream = wrGETURL.GetResponse().GetResponseStream();
            doc.Load(objStream);
        }
        catch
        {
            return;
        }
        finally
        {
            if (objStream is not null)
                objStream.Close();
        }

        string siteXPath = "/html/body/div/div/div/section[3]/ul[2]/li";
        if (pIndex.SiteType == 3) siteXPath = "/html/body/div/div/div/div/section[3]/ul[2]/li";     // 미니갤
        HtmlNodeCollection article = doc.DocumentNode.SelectNodes(siteXPath);
        List<Content> list = new List<Content>();

        if (article is null)
        {
            Console.WriteLine("[ListRefresh_dcMobile_Thread] " + pIndex.Text + " " + "Error");
            return;
        }

        VM.oContentList[pIndex.Value].ClearDataset();

        for (int i = 0; i < article.Count; i++)
        {
            if (article[i].HasClass("adv-inner")) continue;

            HtmlNode lLeftLabel = article[i].SelectSingleNode("div/a[1]");
            HtmlNodeCollection lBottomLabel = lLeftLabel.SelectNodes("ul/li");

            // 디씨 마갤/미니갤 대응
            int lElementNumber = 0;
            if (pIndex.SiteType == 2 || pIndex.SiteType == 3)
                lElementNumber++;

            string lUserIconUrl = "";
            try
            {
                lUserIconUrl = lBottomLabel[lElementNumber + 0].SelectSingleNode("span").GetAttributeValue("class", "");
            }
            catch { }
            
            Content n = new Content()
            {
                num = UrlToNumber(lLeftLabel.GetAttributeValue("href", "")),
                url = lLeftLabel.GetAttributeValue("href", ""),
                title = HttpUtility.HtmlDecode(lLeftLabel.SelectSingleNode("span/span[2]").InnerText),
                userName = HttpUtility.HtmlDecode(lBottomLabel[lElementNumber + 0].InnerText),
                viewCount = lBottomLabel[lElementNumber + 2].InnerText.Remove(0, 3),
                goodCount = lBottomLabel[lElementNumber + 3].InnerText.Remove(0, 3),
                contentDate = lBottomLabel[lElementNumber + 1].InnerText,
                date = fnDcinsideStrToDate(lBottomLabel[lElementNumber + 1].InnerText),
                userIconUrl = lUserIconUrl,
                userIp = "",
                contentIconUrl = lLeftLabel.SelectSingleNode("span/span[1]").GetAttributeValue("class", ""),
                commentCount = article[i].SelectSingleNode("div/a[2]/span").InnerText,
            };

            VM.oContentList[pIndex.Value].InsertRow(n);

            // Last 게시물을 저장 (글 올린 시간)
            if (i == article.Count - 1)
                pIndex.LastContentDateTime = n.date;
        }
    }

    // DcInsise 문자열을 DateTime으로 반환
    public DateTime fnDcinsideStrToDate(string pStr)
    {
        DateTime now = new DateTime();
        DateTime dt = new DateTime();
        
        if (pStr.Length == 5)
        {
            if (pStr[2] == ':') // hh:mm
                dt = new DateTime(now.Year
                , now.Month
                , now.Day
                , int.Parse(pStr.Substring(0, 2))
                , int.Parse(pStr.Substring(3, 2))
                , now.Second
                );
            else                // mm.dd
                dt = new DateTime(now.Year
                , int.Parse(pStr.Substring(0, 2))
                , int.Parse(pStr.Substring(3, 2))
                , now.Hour
                , now.Minute
                , now.Second
                );
        }
        else if (pStr.Length == 19) // xxxx-xx-xx xx:xx:xx
            dt = new DateTime(int.Parse(pStr.Substring(0, 4))
            , int.Parse(pStr.Substring(5, 2))
            , int.Parse(pStr.Substring(8, 2))
            , int.Parse(pStr.Substring(11, 2))
            , int.Parse(pStr.Substring(14, 2))
            , int.Parse(pStr.Substring(17, 2))
            );
        else if (pStr.Length == 8)  // yy.mm.dd
            dt = new DateTime(2000 + int.Parse(pStr.Substring(0, 2))
            , int.Parse(pStr.Substring(3, 2))
            , int.Parse(pStr.Substring(6, 2))
            , now.Hour
            , now.Minute
            , now.Second
            );

        return dt;
    }

    public int UrlToNumber(string pUrl)
    {
        if (string.IsNullOrEmpty(pUrl))
            return 0;
        string[] temp = pUrl.Split('/');
        return int.Parse(temp[temp.Length - 1]);
    }
}


