@page "/adm/ServerPage"
@*〈공통〉*@
@implements IDisposable
@inject IJSRuntime JS               // 자바스크립트 관련
@inject ProtectedLocalStorage LS    // 로컬스토리지 관련
@inject NavigationManager NM        // 페이지 이동 관련
@* 뷰모델의 인스턴스 주입 *@
@inject RGWeb.ViewModels.IContentViewModel VM
@using static RGWeb.Models.ContentModel
@using RGWeb.ViewModels
@using static RGWeb.Shared.ServerInfo

@using OpenQA.Selenium;
@using OpenQA.Selenium.Chrome;
@using System.Diagnostics;

<h3 class="RGTextColor">Server</h3>

<div class="d-flex align-items-center RGTextColor">
    Server Start&nbsp;<SfSwitch @ref="serverSwitch" TChecked="bool" ValueChange="serverOnoff_ValueChange"></SfSwitch>
</div>
    


@code {
    protected List<ChromeDriverService> driverService = new List<ChromeDriverService>();
    protected ChromeOptions options;
    protected List<ChromeDriver> driver = new List<ChromeDriver>();
    private bool serverOnoff = false;
    SfSwitch<bool> serverSwitch;

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < PageTypeList.Count; i++)
            VM.oContentList.Add(new ModelDataSet<Content>());

        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged += async (sender, e) =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // 메모리 누수 방지
    public void Dispose()
    {
        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged -= OnPropertyChangedHandler;

        ServerEnd();
    }

    // 페이지가 로드 될 시 (비동기)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // 첫번째 렌더때 실행
        {
            ;
        }
        else             // 첫번째 렌더 후에 실행
        {
            ;
        }
    }

    private void serverOnoff_ValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        serverOnoff = args.Checked;

        if (serverOnoff)
            ServerStart();
        else
            ServerEnd();
    }

    // 페이지의 시작
    public async Task ServerStart() // 페이지가 처음 로드될때 (아래보다 주로 사용)
    {
        for (int i = 0; i < PageTypeList.Count; i++)
            if (driver is not null && driver.Count > 0 && driver[i] is not null)
                driver[i].Quit();
        driverService.Clear();
        driver.Clear();

        // System.IO.Directory.GetCurrentDirectory() + @"\bin\Debug\net6.0\"
        options = new ChromeOptions();
        options.AddArgument("-headless");
        options.AddArgument("-disable-gpu");
        //options.AddArgument("-disable-images");
        //options.SetPreference("profile.default_content_setting_values.images", 2);
        options.AddArgument("--log-level=3");
        options.AddArgument("--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1");
        // 성능개선대책
        //options.AddArguments("enable-automation");
        //options.AddArguments("--no-sandbox");
        //options.AddArguments("--disable-extensions");
        //options.AddArguments("--dns-prefetch-disable");

        for (int i = 0; i < PageTypeList.Count; i++)
        {
            driverService.Add(ChromeDriverService.CreateDefaultService());
            driverService[i].Port = 44000 + i;
            driver.Add(new ChromeDriver(driverService[i], options));
            driver[i].Manage().Timeouts().PageLoad = TimeSpan.FromMilliseconds(3000);   // 페이지 접속시 지정한 시간 이후까지 로드가 안되면 에러로 빠짐
            driver[i].Manage().Timeouts().ImplicitWait = TimeSpan.FromMilliseconds(0);  // 탐색시 object가 없으면 대기하는 시간.
        }

        Console.WriteLine("[ListRefresh] Start");
        // 인방갤 https://m.dcinside.com/board/ib_new2

        Stopwatch stopwatch = new Stopwatch();
        List<Thread> thread = new List<Thread>();

        while(serverOnoff)
        {
            stopwatch.Reset();
            stopwatch.Start();
            thread.Clear();

            //for (int i = 0; i < PageTypeList.Count; i++)  // i 값 순서가 불안정함
            //{
            //    thread.Add(new Thread(() => ListRefresh_dcMobile_Thread(i, siteUrl[i])));
            //    thread[i].IsBackground = true; // 메인 쓰레드 종료시 강제종료
            //    thread[i].Start();
            //}
            thread.Add(new Thread(() => ListRefresh_dcMobile_Thread(0, PageTypeList[0].Url))); thread[0].IsBackground = true; // 메인 쓰레드 종료시 강제종료
            thread.Add(new Thread(() => ListRefresh_dcMobile_Thread(1, PageTypeList[1].Url))); thread[1].IsBackground = true; // 메인 쓰레드 종료시 강제종료
            thread.Add(new Thread(() => ListRefresh_dcMobile_Thread(2, PageTypeList[2].Url))); thread[2].IsBackground = true; // 메인 쓰레드 종료시 강제종료
            
            thread[0].Start();
            thread[1].Start();
            thread[2].Start();

            foreach (Thread t in thread)
                t.Join();
            VM.oContentList[0].OnPropertyChanged("All");

            stopwatch.Stop();
            Console.WriteLine("시간결과 : " + stopwatch.ElapsedMilliseconds + "ms");
            await Task.Delay(10);
        }

    }

    public async Task ServerEnd()
    {
        for (int i = 0; i < PageTypeList.Count; i++)
            if (driver is not null && driver.Count > 0 && driver[i] is not null)
            {
                driver[i].Quit();
                driverService[i].Dispose();
            }

        Console.WriteLine("Driver Dispose");
    }

    private void ListRefresh_dcMobile_Thread(int pPageNumber, string pPageUrl)
    {
        //Console.WriteLine("[while " + pPageNumber + "] Start");
        try
        {
            driver[pPageNumber].Navigate().GoToUrl(pPageUrl);
        } catch {}

        //Console.WriteLine("[while " + pPageNumber + "] Url");

        IReadOnlyCollection<IWebElement> webElements = driver[pPageNumber].FindElements(By.ClassName("gall-detail-lnktb"));
        VM.oContentList[pPageNumber].ClearDataset();

        //Console.WriteLine("[while " + pPageNumber + "] Find");

        for (int i = 0; i < 20; i++)
            ListRefresh_dcMobile_Find(pPageNumber, i , webElements);
    }

    private void ListRefresh_dcMobile_Find(int pPageNumber, int pElementIndex, IReadOnlyCollection<IWebElement> pWebElement)
    {
        IWebElement lLeftLabel = null;
        IReadOnlyCollection<IWebElement> lBottomLabel = null;
        try
        {
            lLeftLabel = pWebElement.ElementAt(pElementIndex).FindElement(By.ClassName("lt"));
            lBottomLabel = lLeftLabel.FindElement(By.ClassName("ginfo")).FindElements(By.TagName("li"));
        }
        catch
        { 
            Console.WriteLine("[while " + pPageNumber + "] WebElement Fail");
            return;
        } // 여기부터 에러면 그냥 리턴

        string lUserIconUrl = "";
        try
        {
            lUserIconUrl = lBottomLabel.ElementAt(0).FindElement(By.TagName("span")).GetAttribute("class");
        }
        catch { }

        string lUserIp = "";

        string lCommentCount = "";
        try
        {
            lCommentCount = pWebElement.ElementAt(pElementIndex).FindElement(By.ClassName("rt")).FindElement(By.ClassName("ct")).Text;
        }
        catch { }

        try
        {
            Content n = new Content()
                {
                    num = UrlToNumber(lLeftLabel.GetAttribute("href")),
                    url = lLeftLabel.GetAttribute("href"),
                    title = lLeftLabel.FindElement(By.ClassName("subject-add")).FindElement(By.ClassName("subjectin")).Text,
                    userName = lBottomLabel.ElementAt(0).Text,
                    viewCount = lBottomLabel.ElementAt(2).Text.Remove(0, 3),
                    goodCount = lBottomLabel.ElementAt(3).Text.Remove(0, 3),
                    contentDate = lBottomLabel.ElementAt(1).Text,
                    userIconUrl = lUserIconUrl,
                    userIp = lUserIp,
                    contentIconUrl = lLeftLabel.FindElement(By.ClassName("subject-add")).FindElement(By.TagName("span")).GetAttribute("class"),
                    commentCount = lCommentCount,
                };

            VM.oContentList[pPageNumber].InsertRow(n);
        }
        catch
        {
            Console.WriteLine("[while " + pPageNumber + "] new Content Fail");
            return;
        }
    }

    private async Task ListRefresh_dcPC(int pPageNumber, string pPageUrl)
    {
        //Console.WriteLine("[ListRefresh " + pPageNumber + "] Start : " + pPageUrl);

        //while(serverOnoff)
        //{
        //    Console.WriteLine("[while " + pPageNumber + "] Start");
        //    try
        //    {
        //        //driver.Navigate().Refresh();
        //        driver[pPageNumber].Navigate().GoToUrl(pPageUrl);
        //    } catch { }

        //    Console.WriteLine("[while " + pPageNumber + "] End");
        //    await Task.Delay(500);
        //    continue;

        //    IReadOnlyCollection<IWebElement> x = driver[pPageNumber].FindElements(By.CssSelector("tr[class='ub-content us-post']"));
        //    VM.oContentList[pPageNumber].ClearDataset();

        //    int findCount = 0;
        //    foreach(IWebElement y in x)
        //    {
        //        findCount++;
        //        if (findCount >= 20)
        //            break;

        //        string lUserIconUrl = "";
        //        try
        //        {
        //            lUserIconUrl = y.FindElement(By.CssSelector("a[class='writer_nikcon']")).FindElement(By.TagName("img")).GetAttribute("src");
        //        } catch {}

        //        string lUserIp = "";
        //        try
        //        {
        //            lUserIp = y.FindElement(By.CssSelector("span[class='ip']")).Text;
        //        } catch {}

        //        string lCommentCount = "";
        //        try
        //        {
        //            lCommentCount = y.FindElement(By.CssSelector("a[class='reply_numbox']")).FindElement(By.CssSelector("span[class='reply_num']")).Text;
        //        } catch {}

        //        try
        //        {
        //            IWebElement lTopLabel = y.FindElement(By.ClassName("gall_tit")).FindElement(By.TagName("a")); // gall_tit만 해야함. 마이크 아이콘이 있을 수 있음
        //            Content n = new Content()
        //            {
        //                num = int.Parse(y.FindElement(By.ClassName("gall_num")).Text),
        //                url = lTopLabel.GetAttribute("href"),
        //                title = lTopLabel.Text,
        //                userName = y.FindElement(By.ClassName("nickname")).GetAttribute("title"),
        //                viewCount = y.FindElement(By.ClassName("gall_count")).Text,
        //                goodCount = y.FindElement(By.ClassName("gall_recommend")).Text,
        //                date = StrToDate(y.FindElement(By.ClassName("gall_date")).GetAttribute("title")),
        //                userIconUrl = lUserIconUrl,
        //                userIp = lUserIp,
        //                contentIconUrl = lTopLabel.FindElement(By.TagName("em")).GetAttribute("class"),
        //                commentCount = lCommentCount,
        //            };

        //            // 공지는 리스트에 추가 x
        //            if (n.contentIconUrl == "icon_img icon_notice")
        //            {
        //                findCount--; // 공지 수 만큼 다른 게시글로 추가
        //                continue;
        //            }

        //            VM.oContentList[pPageNumber].InsertRow(n);
        //        } catch
        //        {
        //            Console.WriteLine("[while " + pPageNumber + "] new Content Fail");
        //            continue;
        //        }
        //    }
        //    VM.oContentList[pPageNumber].OnPropertyChanged("" + pPageNumber);

        //    Console.WriteLine("[while " + pPageNumber + "] End");
        //    await Task.Delay(100);
        //}
    }

    // xxxx-xx-xx xx:xx:xx 형식 문자열을 DateTime으로 반환
    public DateTime StrToDate(string pStr)
    {
        if (pStr.Length != 19) return DateTime.Now;

        return new DateTime(int.Parse(pStr.Substring(0, 4))
        , int.Parse(pStr.Substring(5, 2))
        , int.Parse(pStr.Substring(8, 2))
        , int.Parse(pStr.Substring(11, 2))
        , int.Parse(pStr.Substring(14, 2))
        , int.Parse(pStr.Substring(17, 2))
        );
    }

    public int UrlToNumber(string pUrl)
    {
        if (string.IsNullOrEmpty(pUrl))
            return 0;
        string[] temp = pUrl.Split('/');
        return int.Parse(temp[temp.Length - 1]);
    }
}


