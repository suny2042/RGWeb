@page "/adm/ListPage"
@*〈공통〉*@
@implements IDisposable
@inject IJSRuntime JS               // 자바스크립트 관련
@inject ProtectedLocalStorage LS    // 로컬스토리지 관련
@inject NavigationManager NM        // 페이지 이동 관련
@* 뷰모델의 인스턴스 주입 *@
@inject RGWeb.ViewModels.IContentViewModel VM
@using static RGWeb.Models.ContentModel
@using RGWeb.ViewModels

@using OpenQA.Selenium;
@using OpenQA.Selenium.Firefox;

<h3>Server</h3>

<div class="d-flex align-items-center">
    Server Start&nbsp;<SfSwitch @ref="serverSwitch" TChecked="bool" ValueChange="serverOnoff_ValueChange"></SfSwitch>
</div>
    


@code {
    protected List<FirefoxDriverService> driverService = new List<FirefoxDriverService>();
    protected FirefoxOptions options;
    protected List<FirefoxDriver> driver = new List<FirefoxDriver>();
    private int pageLength = 3;
    private bool serverOnoff = false;
    SfSwitch<bool> serverSwitch;

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < pageLength; i++)
            VM.oContentList.Add(new ModelDataSet<Content>());

        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged += async (sender, e) =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // 메모리 누수 방지
    public void Dispose()
    {
        for (int i = 0; i < VM.oContentList.Count; i++)
            VM.oContentList[i].PropertyChanged -= OnPropertyChangedHandler;

        ServerEnd();
    }

    // 페이지가 로드 될 시 (비동기)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // 첫번째 렌더때 실행
        {
            ;
        }
        else             // 첫번째 렌더 후에 실행
        {
            ;
        }
    }

    private void serverOnoff_ValueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        serverOnoff = args.Checked;

        if (serverOnoff)
            ServerStart();
        else
            ServerEnd();
    }

    // 페이지의 시작
    public async Task ServerStart() // 페이지가 처음 로드될때 (아래보다 주로 사용)
    {
        for (int i = 0; i < pageLength; i++)
            if (driver is not null && driver.Count > 0 && driver[i] is not null)
                driver[i].Quit();

        // System.IO.Directory.GetCurrentDirectory() + @"\bin\Debug\net6.0\"
        //driverService.HideCommandPromptWindow = true;
        //driverService.Port = 4444;
        options = new FirefoxOptions();
        //options.AddArgument("-window-size=1920x1080");
        options.AddArgument("-headless");
        options.AddArgument("-disable-gpu");

        //Thread myThread = new Thread(ListRefresh); 
        //myThread.Start(); 
        for (int i = 0; i < pageLength; i++)
        {
            driverService.Add(FirefoxDriverService.CreateDefaultService());
            driverService[i].Port = 44000 + i;
            driver.Add(new FirefoxDriver(driverService[i], options));
            driver[i].Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(1);
            driver[i].Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(0); // 탐색시 object가 없으면 대기하는 시간.
        }

        ListRefresh(0, "https://gall.dcinside.com/board/lists/?id=baseball_new10");
        ListRefresh(1, "https://gall.dcinside.com/board/lists/?id=comic_new3");
        ListRefresh(2, "https://gall.dcinside.com/board/lists?id=stream_new1");
        //https://gall.dcinside.com/board/lists/?id=ib_new2
    }

    public async Task ServerEnd()
    {
        for (int i = 0; i < pageLength; i++)
            if (driver is not null && driver.Count > 0 && driver[i] is not null)
            {
                driver[i].Quit();
                driverService[i].Dispose();
            }

        Console.WriteLine("Server Dispose");
    }

    private async Task ListRefresh(int pPageNumber, string pPageUrl)
    {
        Console.WriteLine("[ListRefresh " + pPageNumber + "] Start : " + pPageUrl);

        while(true)
        {
            Console.WriteLine("[while " + pPageNumber + "] Start");
            try
            {
                //driver.Navigate().Refresh();
                driver[pPageNumber].Navigate().GoToUrl(pPageUrl);
            } catch
            {
                await Task.Delay(10);
            }

            IReadOnlyCollection<IWebElement> x = driver[pPageNumber].FindElements(By.CssSelector("tr[class='ub-content us-post']"));
            VM.oContentList[pPageNumber].ClearDataset();

            int findCount = 0;
            foreach(IWebElement y in x)
            {
                findCount++;
                if (findCount >= 20)
                    break;

                string lUserIconUrl = "";
                try
                {
                    lUserIconUrl = y.FindElement(By.CssSelector("a[class='writer_nikcon']")).FindElement(By.TagName("img")).GetAttribute("src");
                } catch {}

                string lUserIp = "";
                try
                {
                    lUserIp = y.FindElement(By.CssSelector("span[class='ip']")).Text;
                } catch {}

                string lCommentCount = "";
                try
                {
                    lCommentCount = y.FindElement(By.CssSelector("a[class='reply_numbox']")).FindElement(By.CssSelector("span[class='reply_num']")).Text;
                } catch {}

                try
                {
                    Content n = new Content()
                    {
                        num = y.FindElement(By.ClassName("gall_num")).Text,
                        url = y.FindElement(By.CssSelector("td[class='gall_tit ub-word']")).FindElement(By.TagName("a")).GetAttribute("href"),
                        title = y.FindElement(By.CssSelector("td[class='gall_tit ub-word']")).FindElement(By.TagName("a")).Text,
                        userName = y.FindElement(By.ClassName("nickname")).GetAttribute("title"),
                        viewCount = y.FindElement(By.ClassName("gall_count")).Text,
                        goodCount = y.FindElement(By.ClassName("gall_recommend")).Text,
                        date = StrToDate(y.FindElement(By.ClassName("gall_date")).GetAttribute("title")),
                        userIconUrl = lUserIconUrl,
                        userIp = lUserIp,
                        contentIconUrl = y.FindElement(By.CssSelector("td[class='gall_tit ub-word']")).FindElement(By.TagName("a")).FindElement(By.TagName("em")).GetAttribute("class"),
                        commentCount = lCommentCount,
                    };

                    VM.oContentList[pPageNumber].InsertRow(n);
                } catch {}
            }
            VM.oContentList[pPageNumber].OnPropertyChanged();

            Console.WriteLine("[while " + pPageNumber + "] End");
            //Thread.Sleep(500);
            await Task.Delay(100);
        }
    }

    // xxxx-xx-xx xx:xx:xx 형식 문자열을 DateTime으로 반환
    public DateTime StrToDate(string pStr)
    {
        if (pStr.Length != 19) return DateTime.Now;

        return new DateTime(int.Parse(pStr.Substring(0, 4))
        , int.Parse(pStr.Substring(5, 2))
        , int.Parse(pStr.Substring(8, 2))
        , int.Parse(pStr.Substring(11, 2))
        , int.Parse(pStr.Substring(14, 2))
        , int.Parse(pStr.Substring(17, 2))
        );
    }
}


