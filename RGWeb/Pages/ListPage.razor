@page "/ListPage"
@*〈공통〉*@
@implements IDisposable
@inject IJSRuntime JS               // 자바스크립트 관련
@inject ProtectedLocalStorage LS    // 로컬스토리지 관련
@inject NavigationManager NM        // 페이지 이동 관련
@* 뷰모델의 인스턴스 주입 *@
@inject RGWeb.ViewModels.IContentViewModel VM
@using static RGWeb.Models.ContentModel

@using OpenQA.Selenium;
@using OpenQA.Selenium.Firefox;

<h3>ListPage @kkk</h3>
<button @onclick="PageFirstStart">button</button>

@code {
    protected override async Task OnInitializedAsync()
    {
        VM.oContentList.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };

        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // 메모리 누수 방지
    public void Dispose()
    {
        VM.oContentList.PropertyChanged -= OnPropertyChangedHandler;

        if (driver is not null)
            driver.Quit();
    }

    // 페이지가 로드 될 시 (비동기)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // 첫번째 렌더때 실행
        {
            ;
        }
        else             // 첫번째 렌더 후에 실행
        {
            ;
        }
    }

    protected FirefoxDriverService driverService;
    protected FirefoxOptions options;
    protected FirefoxDriver driver;

    string kkk = "kkk";

    // 페이지의 시작
    public async Task PageFirstStart() // 페이지가 처음 로드될때 (아래보다 주로 사용)
    {
        if (driver is not null)
            driver.Quit();

        // System.IO.Directory.GetCurrentDirectory() + @"\bin\Debug\net6.0\"
        driverService = FirefoxDriverService.CreateDefaultService();
        //driverService.HideCommandPromptWindow = true;
        driverService.Port = 4444;
        options = new FirefoxOptions();
        //options.AddArgument("-window-size=1920x1080");
        options.AddArgument("-headless");
        options.AddArgument("-disable-gpu");
        driver = new FirefoxDriver(driverService, options);

        driver.Navigate().GoToUrl("https://gall.dcinside.com/board/lists/?id=baseball_new10");
        //driver.Navigate().GoToUrl("https://gall.dcinside.com/board/lists/?id=comic_new3");
        driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(1);
        driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(0); // 탐색시 object가 없으면 대기하는 시간.

        //Thread myThread = new Thread(ListRefresh); 
        //myThread.Start(); 
        ListRefresh();
    }

    private async Task ListRefresh()
    {
        Console.WriteLine("[ListRefresh] Start");
        while(true)
        {
            Console.WriteLine("[while] Start");
            //driver.Navigate().Refresh();
            try
            {
                driver.Navigate().GoToUrl("https://gall.dcinside.com/board/lists/?id=baseball_new10");
            } catch
            {
                await Task.Delay(10);
            }

            Console.WriteLine("[FindElement] x");
            IReadOnlyCollection<IWebElement> x = driver.FindElements(By.CssSelector("tr[class='ub-content us-post']"));
            VM.oContentList.ClearDataset();
            foreach(IWebElement y in x)
            {
                Console.WriteLine("[FindElement] lUserIconUrl");
                string lUserIconUrl = "";
                try
                {
                    lUserIconUrl = y.FindElement(By.CssSelector("a[class='writer_nikcon']")).FindElement(By.TagName("img")).GetAttribute("src");
                } catch {}

                Console.WriteLine("[FindElement] lUserIp");
                string lUserIp = "";
                try
                {
                    lUserIp = y.FindElement(By.CssSelector("span[class='ip']")).Text;
                } catch {}

                Console.WriteLine("[FindElement] lCommentCount");
                string lCommentCount = "";
                try
                {
                    lCommentCount = y.FindElement(By.CssSelector("a[class='reply_numbox']")).FindElement(By.CssSelector("span[class='reply_num']")).Text;
                } catch {}

                Console.WriteLine("[FindElement] new");
                try
                {
                    Content n = new Content()
                    {
                        num = y.FindElement(By.ClassName("gall_num")).Text,
                        url = y.FindElement(By.CssSelector("td[class='gall_tit ub-word']")).FindElement(By.TagName("a")).GetAttribute("href"),
                        title = y.FindElement(By.CssSelector("td[class='gall_tit ub-word']")).FindElement(By.TagName("a")).Text,
                        userName = y.FindElement(By.ClassName("nickname")).GetAttribute("title"),
                        viewCount = y.FindElement(By.ClassName("gall_count")).Text,
                        goodCount = y.FindElement(By.ClassName("gall_recommend")).Text,
                        date = StrToDate(y.FindElement(By.ClassName("gall_date")).GetAttribute("title")),
                        userIconUrl = lUserIconUrl,
                        userIp = lUserIp,
                        contentIconUrl = y.FindElement(By.CssSelector("td[class='gall_tit ub-word']")).FindElement(By.TagName("a")).FindElement(By.TagName("em")).GetAttribute("class"),
                        commentCount = lCommentCount,
                    };
                    Console.WriteLine("[FindElement] new end");

                    VM.oContentList.InsertRow(n);
                } catch {}
            }
            VM.oContentList.OnPropertyChanged();

            Console.WriteLine("[while] End");
            //Thread.Sleep(500);
            await Task.Delay(500);
        }
    }

    // xxxx-xx-xx xx:xx:xx 형식 문자열을 DateTime으로 반환
    public DateTime StrToDate(string pStr)
    {
        if (pStr.Length != 19) return DateTime.Now;

        return new DateTime(int.Parse(pStr.Substring(0, 4))
        , int.Parse(pStr.Substring(5, 2))
        , int.Parse(pStr.Substring(8, 2))
        , int.Parse(pStr.Substring(11, 2))
        , int.Parse(pStr.Substring(14, 2))
        , int.Parse(pStr.Substring(17, 2))
        );
    }
}


