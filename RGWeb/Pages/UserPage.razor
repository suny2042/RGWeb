@page "/rg/UserPage"
@*〈공통〉*@
@implements IDisposable
@inject IJSRuntime JS               // 자바스크립트 관련
@inject ProtectedLocalStorage LS    // 로컬스토리지 관련
@inject NavigationManager NM        // 페이지 이동 관련
@* 뷰모델의 인스턴스 주입 *@
@inject RGWeb.ViewModels.IContentViewModel VM
@using static RGWeb.Models.ContentModel


@code {
    // 지원되는 갤러리 최대 수
    private int pageLength = 3;
    // 동시에 볼 수 있는 페이지 수
    private int selectPageLength = 2;
    // 현재 선택한 페이지 수들
    private List<int> selectPage = new List<int>()
    {
        0, 2
    };
    // 방문한 페이지
    private List<Dictionary<int, bool>> visitedPage = new List<Dictionary<int, bool>>()
    {
        new Dictionary<int, bool>(),
        new Dictionary<int, bool>(),
        new Dictionary<int, bool>(),
    };


    public class PageType
    {
        public int Value { get; set; }
        public string Text { get; set; }
    }
    List<PageType> PageTypeComboBoxList = new List<PageType>
    {
        new PageType() { Value = 0, Text = "국내야구" },
        new PageType() { Value = 1, Text = "만화" },
        new PageType() { Value = 2, Text = "스트리머" },
    };
    private void selectPage_0_ValueChange(ChangeEventArgs<int, PageType> args)
    {
        selectPage_ValueChange(0, args);
    }
    private void selectPage_1_ValueChange(ChangeEventArgs<int, PageType> args)
    {
        selectPage_ValueChange(1, args);
    }
    private void selectPage_ValueChange(int pSelectPage, ChangeEventArgs<int, PageType> args)
    {
        if (VM.oContentList.Count > 0)
            VM.oContentList[selectPage[pSelectPage]].PropertyChanged -= OnPropertyChangedHandler;

        // 콤보박스에서 갤러리 선택
        selectPage[pSelectPage] = args.Value;

        if (VM.oContentList.Count > 0)
            VM.oContentList[selectPage[pSelectPage]].PropertyChanged += async (sender, e) =>
            {
                await InvokeAsync(() =>
                {
                    CleanVisitedPage();
                    StateHasChanged();
                    JS.InvokeVoidAsync("JS_ListContentvisitedTitleTemp"); // 클라에서 선택했던 타이틀 임시 css 제거
                });
            };
    }

    protected override async Task OnInitializedAsync()
    {
        ServerInfo.UserConnectCount++;
        if (VM.oContentList.Count > 0)
        {
            for (int i = 0; i < selectPageLength; i++)
                VM.oContentList[selectPage[i]].PropertyChanged += async (sender, e) =>
                {
                    await InvokeAsync(() =>
                    {
                        CleanVisitedPage();
                        StateHasChanged();
                        JS.InvokeVoidAsync("JS_ListContentvisitedTitleTemp"); // 클라에서 선택했던 타이틀 임시 css 제거
                    });
                };
        }


        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // 메모리 누수 방지
    public void Dispose()
    {
        ServerInfo.UserConnectCount--;
        if (VM.oContentList.Count > 0)
            for (int i = 0; i < selectPageLength; i++)
                VM.oContentList[selectPage[i]].PropertyChanged -= OnPropertyChangedHandler;
    }

    // 페이지가 로드 될 시 (비동기)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // 첫번째 렌더때 실행
        {
            ;
        }
        else             // 첫번째 렌더 후에 실행
        {
            ;
        }
    }

    string iframeUrl = "ContentBlankPage";

    private void fnUrlClickEvent(int pSelectPage, int pNumber)
    {
        if (!visitedPage[selectPage[pSelectPage]].ContainsKey(pNumber))
            visitedPage[selectPage[pSelectPage]].Add(pNumber, true);
    }

    private void CleanVisitedPage()
    {
        if (VM.oContentList.Count > 0)
            for (int i = 0; i < pageLength; i++)
            {
                if (VM.oContentList[i].dataSet.Count <= 0) continue;

                int lowest = VM.oContentList[i].dataSet[VM.oContentList[i].dataSet.Count - 1].num;

                foreach (KeyValuePair<int, bool> item in visitedPage[i])
                    if (item.Key < lowest)
                        visitedPage[i].Remove(item.Key);
            }
    }
}


<SfSplitter Height="100%" Width="100%" SeparatorSize="3" CssClass="rounded">
    <SplitterPanes>

        <SplitterPane Size="250px" Collapsible="true" CssClass="p-0">
            <ContentTemplate>
                <SfSplitter Height="100%" Width="100%" SeparatorSize="3" CssClass="rounded RGBorderColor" Orientation="Syncfusion.Blazor.Layouts.Orientation.Vertical">
                    <SplitterPanes>
                        <SplitterPane Size="40px" CssClass="p-1">
                            <ContentTemplate>
                                <SfComboBox Value="@selectPage[0]" DataSource="@PageTypeComboBoxList" ShowClearButton="false" AllowFiltering="true">
                                    <ComboBoxFieldSettings Value="Value" Text="Text"></ComboBoxFieldSettings>
                                    <ComboBoxEvents TValue="int" TItem="PageType" ValueChange="selectPage_0_ValueChange"></ComboBoxEvents>
                                </SfComboBox>
                            </ContentTemplate>
                        </SplitterPane>
                        <SplitterPane CssClass="p-1">
                            <ContentTemplate>
                                <div class="d-flex flex-column m-0">
                                    @if (VM.oContentList.Count > 0 && VM.oContentList[selectPage[0]].dataSet is not null && visitedPage is not null)
                                    {
                                        foreach (Content item in VM.oContentList[selectPage[0]].dataSet)
                                        {
                                            <RGWeb.Component.ContentComponent pContent="@item" pSelectPage="0" pVisited="visitedPage[selectPage[0]].ContainsKey(item.num)" onUrlClickEvent="fnUrlClickEvent"></RGWeb.Component.ContentComponent>
                                        }
                                    }
                                </div>
                            </ContentTemplate>
                        </SplitterPane>
                    </SplitterPanes>
                </SfSplitter>
            </ContentTemplate>
        </SplitterPane>

        <SplitterPane Size="250px" Collapsible="true" CssClass="p-0">
            <ContentTemplate>
                <SfSplitter Height="100%" Width="100%" SeparatorSize="3" CssClass="rounded RGBorderColor" Orientation="Syncfusion.Blazor.Layouts.Orientation.Vertical">
                    <SplitterPanes>
                        <SplitterPane Size="40px" CssClass="p-1">
                            <ContentTemplate>
                                <SfComboBox Value="@selectPage[1]" DataSource="@PageTypeComboBoxList" ShowClearButton="false" AllowFiltering="true">
                                    <ComboBoxFieldSettings Value="Value" Text="Text"></ComboBoxFieldSettings>
                                    <ComboBoxEvents TValue="int" TItem="PageType" ValueChange="selectPage_1_ValueChange"></ComboBoxEvents>
                                </SfComboBox>
                            </ContentTemplate>
                        </SplitterPane>
                        <SplitterPane CssClass="p-1">
                            <ContentTemplate>
                                <div class="d-flex flex-column m-0">
                                    @if (VM.oContentList.Count > 0 && VM.oContentList[selectPage[1]].dataSet is not null && visitedPage is not null)
                                    {
                                        foreach (Content item in VM.oContentList[selectPage[1]].dataSet)
                                        {
                                            <RGWeb.Component.ContentComponent pContent="@item" pSelectPage="1" pVisited="visitedPage[selectPage[1]].ContainsKey(item.num)" onUrlClickEvent="fnUrlClickEvent"></RGWeb.Component.ContentComponent>
                                        }
                                    }
                                </div>
                            </ContentTemplate>
                        </SplitterPane>
                    </SplitterPanes>
                </SfSplitter>
            </ContentTemplate>
        </SplitterPane>

        <SplitterPane>
            <ContentTemplate>
                <div class="d-flex rounded border RGBorderColor w-100 h-100">
                    <iframe id="userIframe" class="w-100 h-100"></iframe>
                </div>
            </ContentTemplate>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>
